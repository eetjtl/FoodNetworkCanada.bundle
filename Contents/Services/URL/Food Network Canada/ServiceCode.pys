FEED_URL = 'http://feed.theplatform.com/f/dtjsEC/ukK8o58zbRmJ?form=json&byId=%s'
RE_ID = Regex('contentID: "(\d+)"')
SMIL_NS = {'a': 'http://www.w3.org/2005/SMIL21/Language'}

####################################################################################################
def MetadataObjectForURL(url):

    content_id = GetContentId(url)

    if not content_id:
        raise Ex.MediaNotAvailable

    data = JSON.ObjectFromURL(FEED_URL % (content_id))
    entry = data['entries'][0]

    title = entry['title']
    summary = entry['description'] if 'description' in entry else None
    thumb = entry['plmedia$defaultThumbnailUrl'] if 'plmedia$defaultThumbnailUrl' in entry else None
    show = entry['pl1$show'] if 'pl1$show' in entry else None
    season = int(entry['pl1$season']) if 'pl1$season' in entry else None
    index = int(entry['pl1$episode']) if 'pl1$episode' in entry else None
    originally_available_at = Datetime.FromTimestamp(entry['pubDate'] / 1000).date() if 'pubDate' in entry else None

    duration = None
    if 'media$content' in entry:
        if 'plfile$duration' in entry['media$content'][0]:
            duration = int(float(entry['media$content'][0]['plfile$duration']) * 1000)

    if show and season and index:

        return EpisodeObject(
            title = title,
            summary = summary,
            thumb = thumb,
            show = show,
            season = season,
            index = index,
            originally_available_at = originally_available_at,
            duration = duration
        )

    else:
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb,
            originally_available_at = originally_available_at,
            duration = duration
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [
                PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
            ],
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    content_id = GetContentId(url)

    if not content_id:
        raise Ex.MediaNotAvailable

    data = JSON.ObjectFromURL(FEED_URL % (content_id))
    media_content = data['entries'][0]['media$content'][0]['plfile$url']

    if 'manifest=f4m' in media_content:
        media_content = media_content.replace('f4m', 'm3u')
    elif not 'manifest' in media_content:
        media_content = '%s&manifest=m3u' % (media_content)

    xml = XML.ElementFromURL(media_content)
    video_src = xml.xpath('//a:video/@src', namespaces=SMIL_NS)[0].replace('https://', 'http://')

    return IndirectResponse(VideoClipObject, key=video_src)

####################################################################################################
def GetContentId(url):

    html = HTML.ElementFromURL(url)
    content_id = None

    for text in html.xpath('//script/text()'):
        match = RE_ID.search(text)

        if match:
            content_id = match.group(1)

    return content_id
