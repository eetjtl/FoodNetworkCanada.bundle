import ssl, urllib2

'''
Episode URL: http://www.foodnetwork.ca/shows/chuck-and-dannys-road-trip/video/episode/acadian-feast-from-the-east/video.html?v=909417027988
'''

FEED_URL = 'http://feed.theplatform.com/f/dtjsEC/ukK8o58zbRmJ/{}'

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    pid = GetPID(url)

    if not pid:
        raise Ex.MediaNotAvailable

    Log.Debug('* Episode PID: {}'.format(pid))

    json_obj = JSON.ObjectFromURL(FEED_URL.format(pid))

    title = json_obj['title']
    summary = json_obj['description'] if 'description' in json_obj else None
    thumb = json_obj['thumbnails'][0]['url'] if 'thumbnails' in json_obj else None
    show = json_obj['pl1$show'] if 'pl1$show' in json_obj else None
    season = int(json_obj['pl1$season']) if 'pl1$season' in json_obj and json_obj['pl1$season'] != "Special" else None
    index = int(json_obj['pl1$episode']) if 'pl1$episode' in json_obj else None
    originally_available_at = Datetime.FromTimestamp(json_obj['pubDate'] / 1000).date() if 'pubDate' in json_obj else None

    duration = None

    if 'content' in json_obj:

        if 'duration' in json_obj['content'][0]:
            duration = int(float(json_obj['content'][0]['duration']) * 1000)

    if show and season and index:

        return EpisodeObject(
            title = title,
            summary = summary,
            thumb = thumb,
            show = show,
            season = season,
            index = index,
            originally_available_at = originally_available_at,
            duration = duration
        )

    else:

        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb,
            originally_available_at = originally_available_at,
            duration = duration
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels = 2,
            video_resolution = 540,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                )
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    pid = GetPID(url)

    if not pid:
        raise Ex.MediaNotAvailable

    Log.Debug('* PlayVideo Step 1 URL: {}'.format(FEED_URL.format(pid)))

    json_obj = JSON.ObjectFromURL(FEED_URL.format(pid))
    video_url = None

    for item in json_obj['content']:

        Log.Debug('* PlayVideo Step 2 URL: {}'.format(item['url'].replace('f4m', 'm3u')))

        try:

            data = HTTP.Request(item['url'].replace('f4m', 'm3u') + '&manifest=m3u', follow_redirects=False).content
            xml = XML.ElementFromString(data)

            try:
                video_url = xml.xpath('//a:video/@src', namespaces={'a': 'http://www.w3.org/2005/SMIL21/Language'})[0]
            except:
                if 'GeoLocationBlocked' in data:
                    raise Ex.MediaGeoblocked

        except Ex.RedirectError, e:

            if 'Location' in e.headers:

                master_playlist = GetData(e.headers['Location'])
                sub_playlist = Regex('RESOLUTION=960x540.+\n(.+\.m3u8)').search(master_playlist).group(1)
                base_url = e.headers['Location'].rsplit('/', 1)[0]

                video_url = '%s/%s' % (base_url, sub_playlist)

            else:
                raise Ex.MediaNotAvailable
        except:
            raise Ex.MediaNotAvailable

        if video_url:
            break

    if video_url:
        return IndirectResponse(VideoClipObject, key=video_url)
    else:
        raise Ex.MediaNotAvailable

####################################################################################################
def GetPID(url):

    return url.rsplit('?v=', 1)[1]

####################################################################################################
def GetData(url):

    req = urllib2.Request(url, headers={'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'})
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    data = urllib2.urlopen(req, context=ssl_context).read()

    return data
